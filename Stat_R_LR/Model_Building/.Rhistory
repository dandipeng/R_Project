class(check_num_delay)
dim(check_num_delay)
check_num_delay
transpose(check_num_delay)
rev(check_num_delay)
check_num_delay
check_num_day[,2]
check_num_delay[,2]
check_num_delay[2,]
order(check_num_delay[2,])
which(order(check_num_delay[2,])==1)
check_num_delay[,which(order(check_num_delay[2,])==1)]
names(check_num_delay)[which(order(check_num_delay[2,])==1)]
names(check_num_delay)
colnames(check_num_delay)[which(order(check_num_delay[2,])==1)]
colnames(check_num_delay)[which(order(check_num_delay[2,],decreasing = T)==1)]
# Third try, another bar plot:
ggplot(air, aes(OP_UNIQUE_CARRIER, fill = ontime)) +
geom_bar(position = "dodge")
order(check_num_delay[2,],decreasing = T)
which(order(check_num_delay[2,],decreasing = T)==1
)
order(check_num_delay[2,],decreasing = T)
sort(check_num_delay[2,])
sort(check_num_delay[2,],decreasing = T)
colnames(sort(check_num_delay[2,],decreasing = T))
sort(check_num_delay[2,],decreasing = T)[1]
order(check_num_delay[2,],decreasing = T)
colnames(check_num_delay)
check_num_delay[2,]
check_num_delay[2,]
typeof(check_num_delay[2,])
check_num_delay[2,][order(check_num_delay[2,]),]
check_num_delay[2,][order(check_num_delay[2,])]
order(check_num_delay[2,])
check_num_delay[2,][order(check_num_delay[2,],decreasing = T)]
check_num_delay[2,][which(order(check_num_delay[2,],decreasing = T)==1)]
order(check_num_delay[2,],decreasing = T)
order(check_num_delay[2,],decreasing = F)
# * Check for seasonal delays (but we would need data on more months)
# * What area or region is most likely to have delays?
# * What are the main causes of delay?
#     * How often does weather cause a delay?
# * Does a delay on one flight cause later delays (for the same plane)?
na.omit(air)
getwd()
setwd('..')
getwd()
setwd('..')
getwd()
setwd('R_Project/Stat_R_LR/Model_Building/')
# Examples:
# 206-HW5-5
property <- read.table(file = 'hw5_property.txt')
head(property)
colnames(property)
colnames(property) <- c('Y','X1','X2','X3','X4')
colnames(property) <- c('rental_rates', 'age', 'operation_expense', 'vacancy_rate', 'footage')
# colnames(property) <- c('rental_rates', 'age', 'operation_expense', 'vacancy_rate', 'footage')
str(property)
# response variable
hist(property$rental_rates)
# response variable
par(mfrow = c(2,2))
hist(property$rental_rates)
hist(log(property$rental_rates))
hist(sqrt(property$rental_rates))
hist(1/property$rental_rates)
property[,2:]
property[,2:ncol(property)]
# looks like the original one works best
# keep going, seems to be unnecessary to do transformation
# (1)
sapply(property[,2:ncol(property)],hist)
sapply(property[,2:ncol(property)],summary)
apply(property,MARGIN = 2,summary)
# (2)
pairs(property)
cor(property)
cor(property)
# (3) additive models
fit1 <- lm(rental_rates~., data = property)
summary(fit1)
fit2 <- lm(rental_rates~*, data = property)
fit2 <- lm(rental_rates~:, data = property)
fit2 <- lm(rental_rates~.+:, data = property)
fit2 <- lm(rental_rates~.+*, data = property)
fit2 <- lm(rental_rates~(.)^2, data = property)
summary(fit2)
summary(fit1)
# with one interaction
fit2 <- lm(rental_rates~.+ age:operation_expense, data = property)
summary(fit2)
anova(fit1)
summary(fit1)
# (4)
plot(fit1)
boxplot(fit1$residuals)
boxplot(fit1$residuals) + ylim(-2,2)
boxplot(fit1$residuals,ylim = c(-2,2))
boxplot(fit1$residuals,ylim = c(-2.5,2))
colnames(property)[2:5]
# (5) predictor variables vs. residuals
apply(property[,colnames(property)[2:5]],2, function(x) plot(x, fit1$residuals))
# (5) predictor variables vs. residuals
apply(property[,colnames(property)[2:5]],2, function(x) plot(x, fit1$residuals, xlab=colnames(x)))
# (5) predictor variables vs. residuals
apply(property[,colnames(property)[2:5]],2, function(x) plot(x, fit1$residuals, xlab=names(x)))
# (5) predictor variables vs. residuals
apply(property[,colnames(property)[2:5]],2, function(x) plot(x, fit1$residuals))
#   -> no obvious pattern
property[,2] * property[,3]
c(2:3)
c(2:5)
for (i in c(2,3,4)){
for j in c(i:5){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
}
}
for (j in c(i:5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
}
for (i in c(2,3,4)){
for (j in c(i:5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
}
}
for (i in c(2,3,4)){
for (j in c((i+1):5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
}
}
plot(propery[,1],property[,2])
plot(properyy[,1],property[,2])
plot(property[,1],property[,2])
plot(property[,1],property[,2])
for (i in c(2,3,4)){
for (j in c((i+1):5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
}
}
abline(x=0)
for (i in c(2,3,4)){
for (j in c((i+1):5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
abline(x=0)
}
}
for (i in c(2,3,4)){
for (j in c((i+1):5)){
interactions <- property[,i]* property[,j]
plot(interactions, fit1$residuals, xlab = paste(colnames(property)[i],'*',colnames(property)[j]))
abline(h=0,lty = 3)
}
}
summary(fit1)
dim(property)
# get predictions
newX = data.frame(age=10, operation_expense=8.8, vacancy_rate=0.18, footage=75080)
predict(fit1, newX, interval="confidence", level=0.99, se.fit=TRUE)
predict(fit1, newX, interval="prediction", level=0.99, se.fit=TRUE)
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
anova(fit1)
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
anova(fit1)[,2]
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
anova(fit1)[,2][-1]
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
anova(fit1)[,2][-5]
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
sum(anova(fit1)[,2][-5])
SSR_fit = sum(anova(fit1)[,2][-5])
SSE_fit = anova(fit1)[,2][5]
MSR_fit = SSR_fit/p
# Test for whether a regression relation exists here
# H_0: beta_1=beta_2=...=beta_4=0
# H_a: At least one of them is not zero.
n = nrow(property)
p = ncol(property)
anova(fit1)
SSR_fit = sum(anova(fit1)[,2][-5])
SSE_fit = anova(fit1)[,2][5]
MSR_fit = SSR_fit/p
MSE_fit = SSE_fit/(n-p-1)
F_test_val = MSR_fit/MSE_fit
pf(0.95,df1 = p,df2 = n-p-1)
F_test_val
pf(0.99,df1 = p,df2 = n-p-1)
pf(q=0.99,df1 = p,df2 = n-p-1)
library(astsa)
install.packages('astsa')
install.packages('forecast')
# read from website
bone = read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/bone.data",
header = TRUE)
fetwd()
getwd()
##### Read in Data
data = read.table('realestate.txt')
str(data)
Y = data[, 2]
hist(Y, main="Histogram of Sale Price")
hist(log(Y), main="Histogram of Log Sale Price")
y = log(Y)
#categorical predictor variables
X_c = data[, c(6,8,10,11,13)]
colnames(X_c) = c("AC","pool","quality","style","hw")
#quantitative predictor variables
X_q = data[, c(3,4,5,7,9,12)]
colnames(X_q) = c("sqf","bedrm","bathrm","garage","year","lotsz")
#transformed dataset
d = cbind(y,X_q,X_c)
head(d)
ind <- sample(1:100,50,replace = F)
ind
plot(fit1, which=4)
plot(fit1, which=5)
# STA206_HW6
# (a)
n <- length(property[,1])
sample_mean <- c(0,0,0,0,0)
sample_sd <- c(0,0,0,0,0)
for(i in c(1,2,3,4,5)) {
sample_mean[i] <- mean(property[,i])
sample_sd[i] <- sd(property[,i])
print(paste("Sample mean of", names(property)[i], "is" ,sample_mean[i]))
print(paste("Sample sd of", names(property)[i], "is" ,sample_sd[i]))
}
names(property)
r_sq_1 <- summary(lm(formula=age~operation_expense+vacancy_rate+footage, data=property))$r.squared
r_sq_2 <- summary(lm(formula=operation_expense~age+vacancy_rate+footage, data=property))$r.squared
r_sq_3 <- summary(lm(formula=vacancy_rate~age+operation_expense+footage, data=property))$r.squared
r_sq_4 <- summary(lm(formula=footage~age+operation_expense+vacancy_rate, data=property))$r.squared
c(r_inverse[1,1], r_inverse[2,2], r_inverse[3,3], r_inverse[4,4])
# STA206_HW6
# (a)
n <- length(property[,1])
sample_mean <- c(0,0,0,0,0)
sample_sd <- c(0,0,0,0,0)
for(i in c(1,2,3,4,5)) {
sample_mean[i] <- mean(property[,i])
sample_sd[i] <- sd(property[,i])
print(paste("Sample mean of", names(property)[i], "is" ,sample_mean[i]))
print(paste("Sample sd of", names(property)[i], "is" ,sample_sd[i]))
}
# Standardized X
X_star <- as.matrix(cbind(rep(1,n), property[,2:5]))
names(X_star)[1] = "1"
for(i in c(2,3,4,5)) {
X_star[,i] <- (1/sqrt(n-1))*((X_star[ ,i] - sample_mean[i])/sample_sd[i])
}
# multicollinearity : VIF = 1/(1-R_k^2)
X_star_sq <- t(X_star)%*%X_star
r_inverse <- solve(X_star_sq)[2:5,2:5]
r_sq_1 <- summary(lm(formula=age~operation_expense+vacancy_rate+footage, data=property))$r.squared
r_sq_2 <- summary(lm(formula=operation_expense~age+vacancy_rate+footage, data=property))$r.squared
r_sq_3 <- summary(lm(formula=vacancy_rate~age+operation_expense+footage, data=property))$r.squared
r_sq_4 <- summary(lm(formula=footage~age+operation_expense+vacancy_rate, data=property))$r.squared
c(r_inverse[1,1], r_inverse[2,2], r_inverse[3,3], r_inverse[4,4])
# VIF (>1 a little bit exploded but <10, then it is okay)
c(1/(1-r_sq_1),1/(1-r_sq_2),1/(1-r_sq_3),1/(1-r_sq_4))
# VIF (>1 a little bit exploded but <10, then it is okay)
c(1/(1-r_sq_1),1/(1-r_sq_2),1/(1-r_sq_3),1/(1-r_sq_4))
getwd()
knitr::opts_chunk$set(echo = TRUE)
library('openxlsx')
data = read.xlsx('Data25_7.xlsx', colNames = FALSE)
data = read.xlsx('Data25_7.xlsx', colNames = FALSE)
getwd()
data = read.xlsx('Data25_7.xlsx', colNames = FALSE)
colnames(data) = c('sod', 'brand','retail')
data$brand = factor(data$brand)
data$retail = factor(data$retail)
library('lme4')
mymodel = aov(sod~ Error(brand), data=data)
summary=summary(mymodel)
summary
data
summary
?StepAIC
library(MASS)
?StepAIC
?stepAIC
# description of the data
# setwd("D:/R/R-HW")
rent=read.csv("Time_Series_Analysis/2beds1.csv",header=T)  #Rename the variables
library(astsa)
library(forecast)
# data construction
str(rent)
# estimating trend
time = 1:length(rent) #Creat time
fit1 = lm(rent ~ time)
fit1 = lm(rent ~ time)
class(rent)
# description of the data
# setwd("D:/R/R-HW")
rent=read.csv("Time_Series_Analysis/2beds1.csv",header=T)  #Rename the variables
# data construction
str(rent)
rent
rent=ts(rent$X2beds,start=c(2010,11),frequency=12)  #Read the data as time series
# estimating trend
time = 1:length(rent) #Creat time
fit1 = lm(rent ~ time)
rent
fit2 = lm(rent ~ poly(time,2, raw=T))
fit3 = lm(rent ~ poly(time,3, raw=T))
plot(time, rent, type="l")
lines(time, fitted(fit1), col="purple")
lines(time, fitted(fit2), col="blue")
lines(time, fitted(fit3), col="red")
# estimating seasonality manually
de_trend = rent - fitted(fit3)
period = 12
cycles = length(de_trend)/period
data_matrix = t(matrix(de_trend, ncol=cycles))
seas_data = matrix(0, cycles, period)
seas_data
?t
data_matrix
for (j in 1:cycles){
rmean = mean(data_matrix[j,])
for (i in 1:period)
seas_data[j,i] = data_matrix[j,i]-rmean
}
seas_data
Cycles = rep(colMeans(seas_data), cycles)
Trend = ts(fit3$fitted.values,start=c(2010,11),frequency=12)
Cycles = ts(Cycles,start=c(2010,11),frequency=12)
smooth = Cycles + Trend
# Using decompose
dec = decompose(rent)
#Draw the seasonality
s_t=ts(dec$seasonal,start=c(2010,11),frequency=12)
#Plot the deseasonalized data
des=rent-s_t
plot.ts(des,main="deseasonalized data")
################trend#######################
#fit the trend
fit_m_t=lm(des~poly(time,3))
?ts
getwd()
# logistic Regression
library(readxl)
sparrow = read_excel('survival_sparrow.xls')
# 1. A description of the data and the goal of the analysis.
str(sparrow)
sparrow$STATUS = factor(sparrow$STATUS)
sparrow$AG = factor(sparrow$AG)
summary(sparrow)
# check the relationship among quantitative predictor variables
pairs(sparrow[,3:11])
cor(sparrow[,3:11])
# check the distribution of quantitative predictor variables to response variable
par(mfrow=c(2,2))
for (i in 3:11){
boxplot(sparrow[,i]~sparrow[,1], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
for (i in 3:11){
boxplot(sparrow[,i]~sparrow[,1], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
for (i in 3:11){
boxplot(sparrow[colnames(sparrow)[i]]~sparrow[,1], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
colnames(sparrow)[i]
colnames(sparrow)[1]
for (i in 3:11){
print(i)
boxplot(sparrow[colnames(sparrow)[i]]~sparrow["STATUS"], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
sparrow["STATUS"]
sparrow[,i]
for (i in 3:11){
boxplot(sparrow[,i]~sparrow["STATUS"], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
apply(sparrow[,3:11], 2, function(x) boxplot(x~sparrow["STATUS"], xlab = 'STATUS'))
apply(sparrow[,3:11], 2, function(x) boxplot(x~sparrow[,1], xlab = 'STATUS'))
class(sparrow)
# logistic Regression
library(readxl)
sparrow = read_excel('survival_sparrow.xls')
# 1. A description of the data and the goal of the analysis.
str(sparrow)
class(sparrow)
sparrow$STATUS = factor(sparrow$STATUS)
sparrow$AG = factor(sparrow$AG)
summary(sparrow)
# check the relationship among quantitative predictor variables
pairs(sparrow[,3:11])
cor(sparrow[,3:11])
# check the distribution of quantitative predictor variables to response variable
par(mfrow=c(2,2))
apply(sparrow[,3:11], 2, function(x) boxplot(x~sparrow[,1], xlab = 'STATUS'))
for (i in 3:11){
boxplot(sparrow[,i]~sparrow["STATUS"], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
class(unlist(sparrow))
unlist(sparrow)
sparrow
class(sparrow)
class(as.data.frame(sparrow))
# 1. A description of the data and the goal of the analysis.
sparrow <- as.data.frame(sparrow)
str(sparrow)
class(sparrow)
sparrow = read_excel('survival_sparrow.xls')
# 1. A description of the data and the goal of the analysis.
sparrow <- as.data.frame(sparrow)
str(sparrow)
class(sparrow)
sparrow$STATUS = factor(sparrow$STATUS)
sparrow$AG = factor(sparrow$AG)
summary(sparrow)
# check the distribution of quantitative predictor variables to response variable
par(mfrow=c(2,2))
for (i in 3:11){
boxplot(sparrow[,i]~sparrow[,1], xlab = 'STATUS', ylab = names(sparrow)[i],
main=paste('boxplot of STATUS to ',names(sparrow)[i]))
}
# check the distribution of quantitative predictor variables to quantitative predictor variable
for (i in 3:11){
boxplot(sparrow[,i]~sparrow[,2], xlab = 'AG', ylab = names(sparrow)[i],
main=paste('boxplot of AG to ',names(sparrow)[i]))
}
# check the relationship between age qualitative variable and response variable
library(gmodels)
joint = CrossTable(sparrow$STATUS,sparrow$AG,prop.chisq = FALSE)
install.packages('gmodels')
# check the relationship between age qualitative variable and response variable
library(gmodels)
joint = CrossTable(sparrow$STATUS,sparrow$AG,prop.chisq = FALSE)
par(mfrow=c(1,1))
STATUS_given_AGE = joint$prop.col
barplot(STATUS_given_AGE, col = rainbow(2), ylab = 'Proportion of status given age', xlab = 'AGE')
legend('topright', inset = c(.05,.01),c('Perished','Survived'),pch = 15, col=rainbow(2),bty='o', bg='white')
# change y to 0 - 1
sparrow$y = ifelse(sparrow$y == 'Survived', 1, 0)
sparrow$y = factor(sparrow$y)
# change y to 0 - 1
sparrow$y = ifelse(sparrow$y == 'Survived', 1, 0)
sparrow$y
# change the column name
names(sparrow) = c('y','x1','x2','x3','x4','x5','x6','x7','x8','x9','x10')
# change y to 0 - 1
sparrow$y = ifelse(sparrow$y == 'Survived', 1, 0)
sparrow$y = factor(sparrow$y)
sparrow$x1 = factor(sparrow$x1)
# check the type of variables
str(sparrow)
# check the initial data
summary(sparrow)
# logistic regression
model_full= glm(y~., data=sparrow, family=binomial)
model_initial = glm(y~1, data = sparrow, family = binomial)
summary(model_full)
stepAIC(model_initial, list(upper = model_full), trace = F, direction = 'both')
stepAIC(model_initial, list(upper = model_full), trace = F, direction = 'both', k = 2)
library(car)
# forward stepwise
step(model_initial, direction = 'forward',
scope = list(lower = model_initial, upper = model_full))
# backward stepwise
step(model_full,direction = 'backward',
scope = list(lower = model_initial, upper = model_full))
# stepwise
step(model_full,direction = 'backward',
scope = list(lower = model_initial, upper = model_full))
# create the table for selection
sparrow_2 = sparrow[,c('y','x1','x2','x4','x6','x10')]
# model full & model initial
model2_full = glm(y~.*.,data = sparrow_2, family = binomial)
model2_initial = glm(y~1,data = sparrow_2, family = binomial)
# forward stepwise with AIC
step(model2_initial, direction = 'forward',
scope = list(lower = model2_initial, upper = model2_full))
# backward stepwise
step(model2_full,direction = 'backward',
scope = list(lower = model2_initial, upper = model2_full))
# stepwise
final_model = step(model2_full,direction = 'both',
scope = list(lower = model2_initial, upper = model2_full), trace = 0)
fnl_model = glm(y~x2+x4+x6+x10, data = sparrow_2, family = binomial)
# check the VIF
vif(fnl_model)
# summary the final model
summary(fnl_model)
# get the basic diagnostic plots
par(mfrow=c(2,2))
plot(fnl_model)
